#include <bits/stdc++.h>
using namespace std;

const double INF = 1e18;

int main() {
    ifstream file("data.txt");
    if (!file.is_open()) {
        cerr << "Could not open data.txt\n";
        return 1;
    }

    int n, m;
    file >> n >> m;

    vector<vector<pair<int, double>>> adj(n + 1);
    for (int i = 0; i < m; i++) {
        int u, v;
        double w;
        file >> u >> v >> w;
        adj[u].push_back(make_pair(v, w));
    }

    int start, end;
    file >> start >> end;
    file.close();

    vector<double> dist(n + 1, INF);
    vector<int> parent(n + 1, -1);
    dist[start] = 0;

    priority_queue<pair<double, int>, vector<pair<double, int>>, greater<pair<double, int>>> pq;
    pq.push(make_pair(0, start));

    while (!pq.empty()) {
        pair<double, int> top = pq.top(); pq.pop();
        double d = top.first;
        int u = top.second;

        if (d > dist[u]) continue;

        for (vector<pair<int, double>>::iterator it = adj[u].begin(); it != adj[u].end(); ++it) {
            int v = it->first;
            double w = it->second;

            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                parent[v] = u;
                pq.push(make_pair(dist[v], v));
            }
        }
    }

    if (dist[end] == INF) {
        cout << "No path found.\n";
        return 0;
    }

    vector<int> path;
    for (int at = end; at != -1; at = parent[at])
        path.push_back(at);
    reverse(path.begin(), path.end());

    cout << "Shortest distance: " << dist[end] << " Kilometers\n";
    cout << "Path: ";
    for (int node : path) cout << node << " ";
    cout << "\n";

    return 0;
}
